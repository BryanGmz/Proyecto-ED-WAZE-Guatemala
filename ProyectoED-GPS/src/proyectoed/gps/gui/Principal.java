/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectoed.gps.gui;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import proyectoed.gps.objetos.*;
import proyectoed.gps.manejadores.*;

/**
 *
 * @author bryan
 */
public class Principal extends javax.swing.JFrame {
    private Grafo grafo;
    private boolean vehiculo;
    private List<Recorrido> listaRecorridos;
    private List<NodoCiudad> listaCiudadesCaminando;
    private final ManejadorOrdenarRecorridos mor = new ManejadorOrdenarRecorridos();
    private Recorrido actual;
    private List<Rutas> cola;
    private int pasosFaltantes;
    private Rutas rutaActual;
    
    /**
     * Creates new form FramePrincipal
     */
    public Principal() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JPanel();
        comboBoxCiudades = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboBoxCiudadesDestino = new javax.swing.JComboBox<>();
        btnBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaTexto = new javax.swing.JTextArea();
        panelMapa = new javax.swing.JPanel();
        panelDesplazamiento = new javax.swing.JScrollPane();
        panelImagen = new javax.swing.JPanel();
        lblImagen = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtRutaSeleccionada = new javax.swing.JTextField();
        btnArbolB = new javax.swing.JButton();
        btnSiguienteRuta = new javax.swing.JButton();
        txtRuta = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboBoxAC = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        comboBoxMejor = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        comboPeor = new javax.swing.JComboBox<>();
        btnSelectMejor = new javax.swing.JButton();
        btnSelectPeor = new javax.swing.JButton();
        txtPasos = new javax.swing.JTextField();
        btnAvanzarPasos = new javax.swing.JButton();
        btnInfRecorrido = new javax.swing.JButton();
        menu = new javax.swing.JMenuBar();
        menuCargar = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Ciudad Origen");

        jLabel2.setText("Ciudad Destino");

        btnBuscar.setText("Buscar Rutas");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        areaTexto.setEditable(false);
        areaTexto.setColumns(20);
        areaTexto.setRows(5);
        jScrollPane1.setViewportView(areaTexto);

        javax.swing.GroupLayout panelImagenLayout = new javax.swing.GroupLayout(panelImagen);
        panelImagen.setLayout(panelImagenLayout);
        panelImagenLayout.setHorizontalGroup(
            panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImagen, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
        );
        panelImagenLayout.setVerticalGroup(
            panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelImagenLayout.createSequentialGroup()
                .addComponent(lblImagen, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                .addGap(72, 72, 72))
        );

        panelDesplazamiento.setViewportView(panelImagen);

        javax.swing.GroupLayout panelMapaLayout = new javax.swing.GroupLayout(panelMapa);
        panelMapa.setLayout(panelMapaLayout);
        panelMapaLayout.setHorizontalGroup(
            panelMapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMapaLayout.createSequentialGroup()
                .addComponent(panelDesplazamiento)
                .addContainerGap())
        );
        panelMapaLayout.setVerticalGroup(
            panelMapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMapaLayout.createSequentialGroup()
                .addComponent(panelDesplazamiento, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(1, 1, 1))
        );

        jLabel3.setText("MAPA - CIUDADES");

        jLabel4.setText("Ruta Seleccionada:");

        txtRutaSeleccionada.setEditable(false);

        btnArbolB.setText("Rutas Restantes (ÁRBOL B)");
        btnArbolB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArbolBActionPerformed(evt);
            }
        });

        btnSiguienteRuta.setText("Avanzar a la Siguiente Ruta");
        btnSiguienteRuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteRutaActionPerformed(evt);
            }
        });

        txtRuta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRutaKeyTyped(evt);
            }
        });

        jLabel5.setText("Ingresa la Ruta:");

        jButton1.setText("Selecionar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel6.setText("Seleccionar RUTA:");

        jLabel7.setText("Mejor Opcion:");

        comboBoxAC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vehículo", "Caminando" }));

        jLabel8.setText("Selecciona:");

        jLabel9.setText("Peor Opcion:");

        btnSelectMejor.setText("Select");
        btnSelectMejor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectMejorActionPerformed(evt);
            }
        });

        btnSelectPeor.setText("Select");
        btnSelectPeor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectPeorActionPerformed(evt);
            }
        });

        txtPasos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPasosKeyTyped(evt);
            }
        });

        btnAvanzarPasos.setText("Avanzar (Km)");
        btnAvanzarPasos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvanzarPasosActionPerformed(evt);
            }
        });

        btnInfRecorrido.setText("Información Recorrido");
        btnInfRecorrido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInfRecorridoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelPrincipalLayout = new javax.swing.GroupLayout(panelPrincipal);
        panelPrincipal.setLayout(panelPrincipalLayout);
        panelPrincipalLayout.setHorizontalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPrincipalLayout.createSequentialGroup()
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelPrincipalLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(comboBoxCiudades, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(btnBuscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtRutaSeleccionada, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnArbolB, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnSiguienteRuta))
                                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                                        .addComponent(txtPasos, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnAvanzarPasos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPrincipalLayout.createSequentialGroup()
                                    .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel6)
                                        .addGroup(panelPrincipalLayout.createSequentialGroup()
                                            .addComponent(comboPeor, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnSelectPeor))
                                        .addGroup(panelPrincipalLayout.createSequentialGroup()
                                            .addComponent(comboBoxMejor, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnSelectMejor))
                                        .addComponent(jLabel7))
                                    .addGap(1, 1, 1))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPrincipalLayout.createSequentialGroup()
                                    .addComponent(txtRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelPrincipalLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelMapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panelPrincipalLayout.createSequentialGroup()
                                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(133, 133, 133)
                                        .addComponent(jLabel8))
                                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(comboBoxCiudadesDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboBoxAC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnInfRecorrido)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        panelPrincipalLayout.setVerticalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxCiudades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxCiudadesDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxAC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnInfRecorrido))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addComponent(btnBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtRutaSeleccionada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnArbolB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSiguienteRuta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPasos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAvanzarPasos))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSelectMejor)
                            .addComponent(comboBoxMejor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboPeor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSelectPeor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(txtRuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelMapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(2, 2, 2)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
        );

        menuCargar.setText("Cargar");
        menuCargar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuCargarMouseClicked(evt);
            }
        });
        menuCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCargarActionPerformed(evt);
            }
        });
        menu.add(menuCargar);

        jMenu2.setText("Acerca de..");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        menu.add(jMenu2);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCargarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuCargarActionPerformed

    private void menuCargarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuCargarMouseClicked
        // TODO add your handling code here:
        if (grafo != null) {
            grafo.destructor();
        }
        
        System.out.println("Entro");
        grafo = new Grafo();
        listaCiudadesCaminando = new ArrayList<>();
        JFileChooser chooser = new JFileChooser();
        int opcion = chooser.showOpenDialog(this);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            try {
         
                String docIde = "";
                File archivo = chooser.getSelectedFile();
                FileInputStream entrada;
                entrada = new FileInputStream(archivo);
                int e;
                while ((e = entrada.read()) != -1) {
                    char caracter = (char) e;
                    docIde += caracter;
                }
                entrada.close();
                listaCiudadesCaminando.clear();
                grafo.getListaCiudades().clear();
                grafo.llenarGrafo(docIde);
                grafo.generarGraphvizGrafo();
                Runtime rt = Runtime.getRuntime();
                rt.exec("dot -Tpng archivoGrafo.dot -o imagenGrafo.png");
                Thread.sleep(1000);
                lblImagen.setIcon(new javax.swing.ImageIcon("./imagenGrafo.png")); // NOI18N
                llenarComboBox();
                crearLista(grafo.getListaCiudades());
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
    }//GEN-LAST:event_menuCargarMouseClicked

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        vehiculo = !comboBoxAC.getSelectedItem().toString().equalsIgnoreCase("Caminando");
        if (vehiculo) {
            listaRecorridos = grafo.rutasARecorrer(grafo.buscarCiudadEnLista(grafo.getListaCiudades(), comboBoxCiudades.getSelectedItem().toString()), 
                grafo.buscarCiudadEnLista(grafo.getListaCiudades(), comboBoxCiudadesDestino.getSelectedItem().toString()));
        } else {
            listaRecorridos = grafo.rutasARecorrer(grafo.buscarCiudadEnLista(listaCiudadesCaminando, comboBoxCiudades.getSelectedItem().toString()), 
                grafo.buscarCiudadEnLista(listaCiudadesCaminando, comboBoxCiudadesDestino.getSelectedItem().toString()));
        }
        if (cola != null) {
            cola.clear();
        } else {
            cola = new ArrayList<>();
        }
        System.out.println("Salida Ciudades: \n" + grafo.getSalidaCiudades());
        System.out.println("Salida Rutas: \n" + grafo.getSalidaRutas());
        agregarTexto("-------------------------------------------------------------------------------");
        if (listaRecorridos.isEmpty()) {
            agregarTexto("\nLo siento no existen rutas para poder llegar al destino indicado.");
            comboBoxMejor.removeAllItems();
            comboPeor.removeAllItems();
        } else {
            agregarTexto(mejoresYPeores() + "\n");
            agregarTexto("Posibles Rutas <Ciudades>: \n" + grafo.getSalidaCiudades());
            agregarTexto("Posibles Rutas: <Rutas>: \n" + grafo.getSalidaRutas());
            comboBoxMejor.removeAllItems();
            comboPeor.removeAllItems();
            if (vehiculo) {
                comboBoxMejor.addItem("Gasolina");
                comboBoxMejor.addItem("Distancia");
                comboBoxMejor.addItem("Gasolina - Distancia");
                comboPeor.addItem("Gasolina");
                comboPeor.addItem("Distancia");
                comboPeor.addItem("Gasolina - Distancia");
            } else {
                comboBoxMejor.addItem("Desgaste Físico");
                comboBoxMejor.addItem("Distancia");
                comboBoxMejor.addItem("Distancia - Desgaste Físico");
                comboPeor.addItem("Desgaste Físico");
                comboPeor.addItem("Distancia");
                comboPeor.addItem("Distancia - Desgaste Físico");
            }
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private String mejoresYPeores() {
        String regresar = "";
        mor.calcularMejores(listaRecorridos);
        if (vehiculo) {
            regresar += "\n<Mejores> ";
            regresar += "\n\nGasolina: \n" + listaRecorridos.get(mor.getIndiceMejorPorGasolina()).toString();
            regresar += "\n\nGasolina - Distancia: \n" + listaRecorridos.get(mor.getIndiceMejorPorDistanciaYGasolina()).toString();
            regresar += "\n\nDistancia: \n" + listaRecorridos.get(mor.getIndiceMejorPorDistancia()).toString();
            regresar += "\n<Peores> ";
            regresar += "\n\nGasolina: \n" + listaRecorridos.get(mor.getIndicePeorPorGasolina()).toString();
            regresar += "\n\nGasolina - Distancia: \n" + listaRecorridos.get(mor.getIndicePeorPorDistanciaYGasolina()).toString();
            regresar += "\n\nDistancia: \n" + listaRecorridos.get(mor.getIndicePeorPorDistancia()).toString();
        } else {
            regresar += "\n<Mejores> ";
            regresar += "\n\nDesgaste Físico: \n" + listaRecorridos.get(mor.getIndiceMejorPorDesgasteFisico()).toString();
            regresar += "\n\nDesgaste Físico - Distancia: \n" + listaRecorridos.get(mor.getIndiceMejorPorDesgasteFisicoYDitancia()).toString();
            regresar += "\n\nDistancia: \n" + listaRecorridos.get(mor.getIndiceMejorPorDistancia()).toString();
            regresar += "\n<Peores> ";
            regresar += "\n\nDesgaste Físico: \n" + listaRecorridos.get(mor.getIndicePeorPorDesgasteFisico()).toString();
            regresar += "\n\nDesgaste Físico- Distancia: \n" + listaRecorridos.get(mor.getIndicePeorPorDesgasteFisicoYDitancia()).toString();
            regresar += "\n\nDistancia: \n" + listaRecorridos.get(mor.getIndicePeorPorDistancia()).toString();
        }
        return regresar;
    }
    
    private void txtPasosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasosKeyTyped
        // TODO add your handling code here:
        char value = evt.getKeyChar();
        if (value <'0' || value >'9') evt.consume();
    }//GEN-LAST:event_txtPasosKeyTyped

    private void btnArbolBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArbolBActionPerformed
        // TODO add your handling code here:
        ArbolB arbol = new ArbolB(2);
        if (cola != null && !cola.isEmpty()) {
            try {
                cola.forEach((rutas) -> {
                    arbol.insert(new LlaveCadena("R_" + rutas.getId()));
                });
                try (FileWriter f = new FileWriter("./archivo.dot")) {
                    f.write(arbol.graphviz());
                } catch (IOException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                Thread.sleep(1000);
                Runtime rt = Runtime.getRuntime();
                rt.exec("dot -Tpng archivo.dot -o imagen.png");
                Thread.sleep(1000);
                rt.exec("nohup display ./imagen.png");
                arbol.eliminacion(arbol.getRaiz().getLlaves());//Destruye la estructura
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debes de seleccionar un nuevo destino.");
        }
    }//GEN-LAST:event_btnArbolBActionPerformed

    private void limpiarComboBox(){
        comboBoxMejor.removeAllItems();
        comboPeor.removeAllItems();
        listaRecorridos.clear(); 
        txtRutaSeleccionada.setText(rutaActual.getCiudadOrigen().getCiudad());
        txtRuta.setText("");
    }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (!txtRuta.getText().isEmpty()) {
                cola.clear();
            if (Integer.parseInt(txtRuta.getText()) > listaRecorridos.size()) {
                JOptionPane.showMessageDialog(this, "Error la opción elegida no se encuentra en la lista. \nVuelve a intentar.", "ERROR", JOptionPane.ERROR_MESSAGE);
            } else {
                actual = listaRecorridos.get(Integer.parseInt(txtRuta.getText()) - 1);
                actual.getListaRutas().forEach((rutasRecorres) -> {
                   cola.add(rutasRecorres);
                });
                pasosFaltantes = cola.get(0).getDistancia();
                rutaActual = cola.get(0);
                mostarMensajeEnPantalla("\n" + actual.toString());
            }
            limpiarComboBox();
        } else {
            JOptionPane.showMessageDialog(null, "Lo siento debes de ingresar un numero.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnSiguienteRutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteRutaActionPerformed
        // TODO add your handling code here:
        if (cola != null && !cola.isEmpty()) {
            siguienteRuta();
        } else {
            JOptionPane.showMessageDialog(this, "Debes de seleccionar un nuevo destino.");
        }
    }//GEN-LAST:event_btnSiguienteRutaActionPerformed

    private void btnAvanzarPasosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvanzarPasosActionPerformed
        // TODO add your handling code here:
        if (cola != null && !cola.isEmpty()) {
            if (!txtPasos.getText().isEmpty()) {
                if (Integer.parseInt(txtPasos.getText()) >= pasosFaltantes) {
                    siguienteRuta();
                } else {
                    pasosFaltantes = pasosFaltantes -Integer.parseInt(txtPasos.getText()); 
                    JOptionPane.showMessageDialog(this, "Has avanzado: " + txtPasos.getText() + " KM\n"
                            + "Quedan restantes: " + pasosFaltantes + " KM para la siguiente ruta del recorrido.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "No has ingresado la cantidad de pasos.");
            }
        } else {
           JOptionPane.showMessageDialog(this, "Debes de seleccionar un nuevo destino.");
        }
    }//GEN-LAST:event_btnAvanzarPasosActionPerformed

    private void btnInfRecorridoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInfRecorridoActionPerformed
        // TODO add your handling code here:
        if (cola == null || cola.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Lo siento debes de seleccionar una ruta.", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            String salida = "";
            salida = cola.stream().map((rutas) -> rutas.getDescripcion() + "\n").reduce(salida, String::concat);
            JOptionPane.showMessageDialog(this, salida);
        }
    }//GEN-LAST:event_btnInfRecorridoActionPerformed

    private void mostarMensajeEnPantalla(String mensaje){
        JOptionPane.showMessageDialog(this, "Ruta Seleccionada: " + mensaje);
    }
    
    private void btnSelectMejorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectMejorActionPerformed
        // TODO add your handling code here:
        if (comboBoxMejor.getSelectedIndex() > -1) {
            if (cola != null) {
                cola.clear();
            }
            if (vehiculo) {
                switch (comboBoxMejor.getSelectedItem().toString()) {
                    case "Gasolina":
                        actual = listaRecorridos.get(mor.getIndiceMejorPorGasolina());
                        mostarMensajeEnPantalla("Mejor -> Gasolina \n" + actual.toString());
                        break;
                    case "Distancia":
                        actual = listaRecorridos.get(mor.getIndiceMejorPorDistancia());
                        mostarMensajeEnPantalla("Mejor -> Distancia \n" + actual.toString());
                        break;
                    default:
                        mostarMensajeEnPantalla("Mejor -> Gasolina - Distancia \n" + actual.toString());
                        actual = listaRecorridos.get(mor.getIndiceMejorPorDistanciaYGasolina());
                }
            } else {
                switch (comboBoxMejor.getSelectedItem().toString()) {
                    case "Desgaste Físico":
                        actual = listaRecorridos.get(mor.getIndiceMejorPorDesgasteFisico());
                        mostarMensajeEnPantalla("Mejor -> Desgaste Físico \n" + actual.toString());
                        break;
                    case "Distancia":
                        actual = listaRecorridos.get(mor.getIndiceMejorPorDistancia());
                        mostarMensajeEnPantalla("Mejor -> Distancia \n" + actual.toString());
                        break;
                    default:
                        actual = listaRecorridos.get(mor.getIndiceMejorPorDesgasteFisicoYDitancia());
                        mostarMensajeEnPantalla("Mejor -> Desgaste Físico - Distancia \n" + actual.toString());
                }
            }
            actual.getListaRutas().forEach((rutasRecorres) -> {
               cola.add(rutasRecorres);
            });
            pasosFaltantes = cola.get(0).getDistancia();
            rutaActual = cola.get(0);
            limpiarComboBox();
        } else {
            JOptionPane.showMessageDialog(null, "Debes de realizar una nueva busqueda.");
        }
    }//GEN-LAST:event_btnSelectMejorActionPerformed

    private void btnSelectPeorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectPeorActionPerformed
        // TODO add your handling code here:
        if (comboPeor.getSelectedIndex() > -1) {
            if (cola != null) {
                cola.clear();
            }
            if (vehiculo) {
                switch (comboPeor.getSelectedItem().toString()) {
                    case "Gasolina":
                        actual = listaRecorridos.get(mor.getIndicePeorPorGasolina());
                        mostarMensajeEnPantalla("Peor -> Gasolina \n" + actual.toString());
                        break;
                    case "Distancia":
                        actual = listaRecorridos.get(mor.getIndicePeorPorDistancia());
                        mostarMensajeEnPantalla("Peor -> Distancia \n" + actual.toString());
                        break;
                    default:
                        mostarMensajeEnPantalla("Peor -> Gasolina - Distancia\n" + actual.toString());
                        actual = listaRecorridos.get(mor.getIndicePeorPorDistanciaYGasolina());
                }
            } else {
                switch (comboPeor.getSelectedItem().toString()) {
                    case "Desgaste Físico":
                        actual = listaRecorridos.get(mor.getIndicePeorPorDesgasteFisico());
                        mostarMensajeEnPantalla("Peor -> Desgaste Físico \n" + actual.toString());
                        break;
                    case "Distancia":
                        actual = listaRecorridos.get(mor.getIndicePeorPorDistancia());
                        mostarMensajeEnPantalla("Peor -> Distancia \n" + actual.toString());
                        break;
                    default:
                        actual = listaRecorridos.get(mor.getIndicePeorPorDesgasteFisicoYDitancia());
                        mostarMensajeEnPantalla("Peor -> Desgaste Físico - Distancia \n" + actual.toString());
                }
            }
            actual.getListaRutas().forEach((rutasRecorres) -> {
               cola.add(rutasRecorres);
            });
            pasosFaltantes = cola.get(0).getDistancia();
            rutaActual = cola.get(0);
            limpiarComboBox();
        } else {
            JOptionPane.showMessageDialog(null, "Debes de realizar una nueva busqueda.");
        }                                           
    }//GEN-LAST:event_btnSelectPeorActionPerformed

    private void txtRutaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRutaKeyTyped
        // TODO add your handling code here:
        char value = evt.getKeyChar();
        if (value <'0' || value >'9') evt.consume();
    }//GEN-LAST:event_txtRutaKeyTyped

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, ""
                         + "               WAZE-GUATEMALA v1.0                  \n"
                         + "Es una aplicación que te ayuda a movilizarte de un lugar a otro,\n" +
                           "buscando todas las rutas y filtrando las mejores y peores rutas en base a gasolina si es automovil,\n" +
                           "desgaste físico si es caminando y distancia en cualquiera de los casos.\n" 
                         + "Copyright 2020\n"
                         + "Este producto fue creado por:\n"
                         + "(bryanrene-gomezgomez@cunoc.edu.gt) creado en:\n"
                         + "NetBeans IDE 8.2", "Acerca de...", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenu2MouseClicked

    private void siguienteRuta(){
        if (cola.size() > 1) {
            cola.remove(0);
            pasosFaltantes = cola.get(0).getDistancia();
            JOptionPane.showMessageDialog(this, "Ruta Actual: R_" + cola.get(0).getId());
            rutaActual = cola.get(0);
            limpiarComboBox();
            vehiculo = !comboBoxAC.getSelectedItem().toString().equalsIgnoreCase("Caminando");//Recalcular
            if (vehiculo) {
                listaRecorridos = grafo.rutasARecorrer(grafo.buscarCiudadEnLista(grafo.getListaCiudades(), rutaActual.getCiudadOrigen().getCiudad()), 
                    grafo.buscarCiudadEnLista(grafo.getListaCiudades(), comboBoxCiudadesDestino.getSelectedItem().toString()));
            } else {
                listaRecorridos = grafo.rutasARecorrer(grafo.buscarCiudadEnLista(listaCiudadesCaminando, rutaActual.getCiudadOrigen().getCiudad()), 
                    grafo.buscarCiudadEnLista(listaCiudadesCaminando, comboBoxCiudadesDestino.getSelectedItem().toString()));
            }
            System.out.println("Salida Ciudades: \n" + grafo.getSalidaCiudades());
            System.out.println("Salida Rutas: \n" + grafo.getSalidaRutas());
            agregarTexto("-------------------------------------------------------------------------------");
            agregarTexto("-------------------------------------------------------------------------------");
            if (listaRecorridos.isEmpty()) {
                agregarTexto("\nLo siento no existen rutas para poder llegar al destino indicado.");
                comboBoxMejor.removeAllItems();
                comboPeor.removeAllItems();
            } else {
                agregarTexto(mejoresYPeores() + "\n");
                agregarTexto("Posibles Rutas <Ciudades>: \n" + grafo.getSalidaCiudades());
                agregarTexto("Posibles Rutas: <Rutas>: \n" + grafo.getSalidaRutas());
                comboBoxMejor.removeAllItems();
                comboPeor.removeAllItems();
                if (vehiculo) {
                    comboBoxMejor.addItem("Gasolina");
                    comboBoxMejor.addItem("Distancia");
                    comboBoxMejor.addItem("Gasolina - Distancia");
                    comboPeor.addItem("Gasolina");
                    comboPeor.addItem("Distancia");
                    comboPeor.addItem("Gasolina - Distancia");
                } else {
                    comboBoxMejor.addItem("Desgaste Físico");
                    comboBoxMejor.addItem("Distancia");
                    comboBoxMejor.addItem("Distancia - Desgaste Físico");
                    comboPeor.addItem("Desgaste Físico");
                    comboPeor.addItem("Distancia");
                    comboPeor.addItem("Distancia - Desgaste Físico");
                }
            }
        } else {
            limpiarComboBox();
            txtRutaSeleccionada.setText("");
            JOptionPane.showMessageDialog(this, "Has llegado a tu destino.");
            cola.clear();
        }
    }
    
    private void agregarTexto(String agregar){
        areaTexto.setText(areaTexto.getText() + "\n" + agregar);
    }
    
    private void llenarComboBox(){
        grafo.getListaCiudades().stream().map((ciudad) -> {
            comboBoxCiudades.addItem(ciudad.getCiudad());
            return ciudad;
        }).forEachOrdered((ciudad) -> {
            comboBoxCiudadesDestino.addItem(ciudad.getCiudad());
        });
    }
    
    private NodoCiudad obtenerCiudad(List<NodoCiudad> lista, String buscando) {
        for (NodoCiudad nodoCiudad : lista) {
            if (nodoCiudad.getCiudad().equalsIgnoreCase(buscando)) {
                return nodoCiudad;
            }
        } return null;
    }

    private void crearLista(List<NodoCiudad> lista){
        Rutas auxI = null;
        Rutas auxV = null;
        lista.forEach((nodoCiudad) -> {
            listaCiudadesCaminando.add(new NodoCiudad(nodoCiudad.getCiudad()));
        });
        for (NodoCiudad nodoCiudad : lista) {
            for (Rutas rutas : nodoCiudad.getCiudadesDestino()) {
                auxI = new Rutas(obtenerCiudad(listaCiudadesCaminando, rutas.getCiudadOrigen().getCiudad()), 
                    obtenerCiudad(listaCiudadesCaminando, rutas.getCiudadDestino().getCiudad()), rutas.getId(), rutas.getTiempoVehiculo(),
                    rutas.getTiempoCaminando(), rutas.getConsumoGas(), rutas.getDesgastePersona());
                auxI.setDescripcion(rutas.getDescripcion());
                auxI.setDistancia(rutas.getDistancia());
                auxI.setDobleVia(true);
                if (!rutas.isDobleVia()) {
                    auxV = new Rutas(obtenerCiudad(listaCiudadesCaminando, rutas.getCiudadDestino().getCiudad()), 
                            obtenerCiudad(listaCiudadesCaminando, rutas.getCiudadOrigen().getCiudad()), rutas.getId(), rutas.getTiempoVehiculo(),
                            rutas.getTiempoCaminando(), rutas.getConsumoGas(), rutas.getDesgastePersona());
                    auxV.setDescripcion(rutas.getDescripcion());
                    auxV.setDistancia(rutas.getDistancia());
                    auxV.setDobleVia(true);
                    auxI.getCiudadOrigen().agregarRuta(auxI);
                    auxV.getCiudadOrigen().agregarRuta(auxV);
                } else {
                    auxI.getCiudadOrigen().agregarRuta(auxI);
                }
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaTexto;
    private javax.swing.JButton btnArbolB;
    private javax.swing.JButton btnAvanzarPasos;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnInfRecorrido;
    private javax.swing.JButton btnSelectMejor;
    private javax.swing.JButton btnSelectPeor;
    private javax.swing.JButton btnSiguienteRuta;
    private javax.swing.JComboBox<String> comboBoxAC;
    private javax.swing.JComboBox<String> comboBoxCiudades;
    private javax.swing.JComboBox<String> comboBoxCiudadesDestino;
    private javax.swing.JComboBox<String> comboBoxMejor;
    private javax.swing.JComboBox<String> comboPeor;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenu menuCargar;
    private javax.swing.JScrollPane panelDesplazamiento;
    private javax.swing.JPanel panelImagen;
    private javax.swing.JPanel panelMapa;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JTextField txtPasos;
    private javax.swing.JTextField txtRuta;
    private javax.swing.JTextField txtRutaSeleccionada;
    // End of variables declaration//GEN-END:variables
}
